/* Basic Parallax Container Styles - customize as needed */
.parallex1_container,
.parallex2_container,
.parallex3_container,
.parallex4_container,
.parallex_footer_container {
  min-height: 400px; /* Adjust as needed */
  background-attachment: fixed;
  background-position: center;
  background-repeat: no-repeat;
  background-size: cover;
  opacity: 0.7; /* Example: adjust for desired effect */
}

/* Assigning background images */
.parallex1_container {
  background-image: url('./assets/images/cover image.jpg');
}

.parallex2_container {
  background-image: url('./assets/images/cover_image2.jpg');
}

.parallex3_container {
  background-image: url('./assets/images/cover_image3.jpg');
}

.parallex4_container {
  background-image: url('./assets/images/cover_image4.jpg');
}

/* Parallax section 5 does not have a _container div in the current HTML structure */
/* If parallax5 itself should have a background, you can add: */
/*
.parallax5 {
  background-image: url('./assets/images/YOUR_IMAGE_FOR_PARALLAX5.jpg');
  min-height: 300px; 
  background-attachment: fixed;
  background-position: center;
  background-repeat: no-repeat;
  background-size: cover;
}
*/

.parallex_footer_container {
  background-image: url('./assets/images/cover_image7.jpg');
}

/* Add your other global styles, menu_bar, content, card, animations etc. below */

/* Example of how you might style the .visible class for fade-in effects */
.info-card,
.subject-box,
.form-card {
  opacity: 0;
  transform: translateY(20px); /* Optional: for a slight upward movement */
  transition: opacity 0.5s ease-out, transform 0.5s ease-out;
}

.info-card.visible,
.subject-box.visible,
.form-card.visible {
  opacity: 1;
  transform: translateY(0);
}

/* Styles for the text animations if you choose to use classes */
@keyframes fadeIn {
  from { opacity: 0; }
  to { opacity: 1; }
}

@keyframes fadeOut {
  from { opacity: 1; }
  to { opacity: 0; }
}

.short-text-active .short-text,
.long-text-active .long-text {
  /* These classes would be toggled on the parent, and then target the spans */
  /* display: inline !important; */ /* Ensure it shows */
  /* animation: fadeIn 0.5s ease-in-out forwards; */ 
}

/* You might need to adjust how animations are applied. 
   The current App.jsx uses inline style animations for dynamic-text and my_field. 
   It is often better to toggle CSS classes for animations. 
   For example, for dynamic-text: */

#dynamic-text .short-text,
#dynamic-text .long-text {
  display: inline; /* Ensure initial display state allows animation */
  /* opacity: 0; set by animation if starting hidden */
}

/* And in App.jsx, instead of style={{animation: ...}}, you might have className={showLongText ? 'long-text-fade-in' : 'short-text-fade-in'} */
/* .long-text-fade-in { animation: fadeIn 0.5s ease-in-out forwards; } */
/* .short-text-fade-in { animation: fadeIn 0.5s ease-in-out forwards; } */

/* Similar approach for #my_field if you move its animation to CSS classes */
#my_field {
   /* display: none; by default if controlled by visibility state */
   /* opacity: 0; */
}

#my_field.visible {
    /* display: block !important; */ /* Ensure it shows */
    /* animation: fadeIn 0.5s ease-in-out forwards; */
}

/* Loading Spinner */
.loading-spinner {
    display: none; /* Controlled by inline style in App.jsx when loadingSpinnerVisible is true */
    position: fixed; /* Or absolute, depending on context */
    left: 50%;
    top: 50%;
    transform: translate(-50%, -50%);
    border: 4px solid #f3f3f3; 
    border-top: 4px solid #3498db; 
    border-radius: 50%;
    width: 40px;
    height: 40px;
    animation: spin 1s linear infinite;
    z-index: 1001; /* Ensure it's above other content */
}

@keyframes spin {
    0% { transform: translate(-50%, -50%) rotate(0deg); }
    100% { transform: translate(-50%, -50%) rotate(360deg); }
}

/* Overlay */
.overlay {
    /* display: none; */ /* Controlled by inline style in App.jsx when overlayVisible is true */
    position: fixed;
    left: 0;
    top: 0;
    width: 100%;
    height: 100%;
    background-color: rgba(0,0,0,0.7);
    z-index: 1000;
    justify-content: center;
    align-items: center;
    /* Add transition for fade-in if desired */
    opacity: 0;
    transition: opacity 0.3s ease-in-out;
}

.overlay.visible {
    opacity: 1;
}

.overlay-content {
    background-color: white;
    padding: 20px;
    border-radius: 8px;
    max-width: 80%;
    max-height: 80%;
    overflow-y: auto;
    position: relative; /* For positioning the close button */
}

.close-btn {
    position: absolute;
    top: 10px;
    right: 10px;
    background: #ff6b6b;
    color: white;
    border: none;
    padding: 5px 10px;
    border-radius: 5px;
    cursor: pointer;
}

.close-btn:hover {
    background: #ff4757;
} 